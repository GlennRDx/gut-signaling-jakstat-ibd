# Print the plot to the R plotting environment
print(go_plot)
return(list(results = final_results, plot = go_plot))
}
main_workflow(x, n = 50, title = 'Test')
View(df)
View(df)
entrez_ids <- mapIds(org.Hs.eg.db, keys = df$X, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
main_workflow(df, n = 50, title = 'Test')
# Required libraries (ensure these are installed)
library(clusterProfiler)
library(org.Hs.eg.db)
library(dplyr)
library(ggplot2)
library(ggtext)
library(scales)
# Function to perform GO enrichment analysis using gseGO
perform_go_enrichment <- function(df, ont) {
# Convert gene symbols to Entrez IDs
entrez_ids <- mapIds(org.Hs.eg.db, keys = df$X, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Remove duplicates
df <- df[!duplicated(entrez_ids[df$X]), ]
entrez_ids <- entrez_ids[!duplicated(entrez_ids)]
# Create a named vector of logFC values
geneList <- df$log2FoldChange
names(geneList) <- entrez_ids[df$X]
geneList <- na.omit(geneList)
# Sort geneList in decreasing order
geneList <- sort(geneList, decreasing = TRUE)
# Perform GSEA
set.seed(1)
enrich <- gseGO(geneList = geneList,
OrgDb = org.Hs.eg.db,
ont = ont,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
verbose = FALSE)
return(enrich)
}
# Function to extract top GO terms from the results
extract_top_go_terms <- function(enrich, n) {
result <- as.data.frame(enrich)
result <- result %>%
arrange(pvalue) %>%
slice_head(n = n)
result$direction <- ifelse(result$NES > 0, "Up", "Down")
return(result)
}
# Function to create a combined dataframe with GO terms, gene ratios, and gene lists
create_combined_df <- function(df, ont_list, n) {
result_df <- data.frame()
for (ont in ont_list) {
enrich <- perform_go_enrichment(df, ont)
top_terms <- extract_top_go_terms(enrich, n)
top_terms$ont <- ont
top_terms$gene_ratio <- top_terms$setSize / nrow(df)
top_terms$gene_count <- top_terms$setSize
result_df <- rbind(result_df, top_terms)
}
return(result_df)
}
# Clustering function
cluster_go_terms <- function(go_data, h = 0.9) {
print("Starting clustering...")
print(paste("Number of GO terms:", nrow(go_data)))
# Extract GO terms and their associated gene lists
go_terms <- go_data$ID
genes_list <- strsplit(go_data$core_enrichment, "/")
print(paste("Number of gene lists:", length(genes_list)))
# Filter out GO terms with no genes
valid_indices <- sapply(genes_list, function(gene_data) !is.null(gene_data) && length(gene_data) > 0)
valid_go_terms <- go_terms[valid_indices]
valid_genes_list <- genes_list[valid_indices]
print(paste("Number of valid GO terms:", length(valid_go_terms)))
# If no valid GO terms, return an empty dataframe
if (length(valid_go_terms) == 0) {
print("No valid GO terms found. Returning empty dataframe.")
return(data.frame(ID = character(0), cluster = integer(0)))
}
# Define Jaccard similarity function
jaccard_similarity <- function(set1, set2) {
intersection <- length(intersect(set1, set2))
union <- length(union(set1, set2))
return(intersection / union)
}
# Initialize similarity matrix
n <- length(valid_go_terms)
similarity_matrix <- matrix(0, nrow = n, ncol = n, dimnames = list(valid_go_terms, valid_go_terms))
# Calculate pairwise Jaccard similarities
for (i in 1:n) {
for (j in i:n) {
sim <- jaccard_similarity(valid_genes_list[[i]], valid_genes_list[[j]])
similarity_matrix[i, j] <- sim
similarity_matrix[j, i] <- sim  # Symmetric matrix
}
}
# Convert similarity matrix to distance matrix (1 - similarity)
distance_matrix <- 1 - similarity_matrix
# Perform hierarchical clustering
hc <- hclust(as.dist(distance_matrix), method = "average")
# Cut the dendrogram into clusters
clusters <- cutree(hc, h = h)
# Return dataframe with valid GO terms and their clusters
result_df <- data.frame(ID = valid_go_terms, cluster = clusters)
print(paste("Number of clusters:", length(unique(clusters))))
print("Clustering completed.")
return(result_df)
}
# Plotting function
plot_go_enrichment <- function(df, font_size = 8, legend_size = 12, cluster_dot_size = 8, title = NULL) {
# Check for required columns
required_cols <- c("ID", "Description", "pvalue", "ont", "direction", "gene_ratio", "gene_count", "cluster")
missing_cols <- setdiff(required_cols, colnames(df))
if (length(missing_cols) > 0) {
stop(paste("Missing required columns:", paste(missing_cols, collapse = ", ")))
}
# Ensure all required columns are present and non-null
df <- df %>%
filter(!is.na(ID) & !is.na(Description) & !is.na(pvalue) &
!is.na(ont) & !is.na(direction) & !is.na(gene_ratio) &
!is.na(gene_count) & !is.na(cluster))
# Generate a color palette based on the number of clusters
n_clusters <- length(unique(df$cluster))
color_palette <- scales::hue_pal()(n_clusters)
# Create labels with p-value formatting and asterisks
df$label <- sapply(1:nrow(df), function(i) {
pval <- df$pvalue[i]
pval_formatted <- formatC(pval, format = "e", digits = 2)
stars <- ""
if (pval < 0.001) {
stars <- '<span style="font-family: monospace;">***</span>'
} else if (pval < 0.01) {
stars <- '<span style="font-family: monospace;">** </span>'
} else if (pval < 0.05) {
stars <- '<span style="font-family: monospace;"> * </span>'
}
paste0(df$Description[i], " - ", df$ID[i], " - p-val: ", pval_formatted, " ", stars)
})
# Rank by cluster, then by descending NES value
df <- df %>%
arrange(cluster, abs(NES)) %>%
mutate(rank = row_number())
# Create the plot
p <- ggplot(df, aes(x = abs(NES), y = reorder(label, rank))) +
geom_point(aes(color = factor(cluster), size = gene_count), shape = 21, stroke = 0.9, fill = NA) +  # Outline
geom_point(aes(color = factor(cluster), size = gene_count), alpha = 0.7) +  # Filled dot
geom_text(aes(label = cluster), size = 2.5, color = "white", fontface = "bold", show.legend = FALSE) +  # Cluster number
facet_grid(ont ~ direction, scales = "free_y", space = "free_y") +
scale_color_manual(values = color_palette) +
scale_size_continuous(range = c(2, 10)) +
scale_x_continuous(limits = c(0, NA)) +  # Set x-axis to start from 0
theme_bw() +
theme(
axis.text.y = ggtext::element_markdown(size = font_size),
legend.title = element_text(size = legend_size),
legend.text = element_text(size = legend_size),
legend.key.size = unit(cluster_dot_size, "mm")
) +
guides(
color = guide_legend(override.aes = list(size = cluster_dot_size))
) +
labs(x = "Absolute NES", y = "GO Term", color = "Cluster", size = "Gene Count",
title = title)  # Add the user-provided title
return(p)
}
# # Function to save the plot to a specific directory
# save_plot <- function(plot, filename, output_dir, width = 2400, height = 1000, res = 200) {
#   file_path <- file.path(output_dir, paste0(filename, ".png"))
#   ggsave(file_path, plot = plot, width = width / res, height = height / res, dpi = res, units = "in")
# }
# Main workflow function (prints plots to the plotting environment)
main_workflow <- function(df, ont_list = c("BP", "CC", "MF"), n = 20, h = 0.95, title = NULL) {
# Perform enrichment analysis
enrichment_results <- create_combined_df(df, ont_list, n)
# Perform clustering
clustered_results <- cluster_go_terms(enrichment_results, h)
# Merge enrichment and clustering results
final_results <- merge(enrichment_results, clustered_results, by = "ID", all.x = TRUE)
# Create the plot
go_plot <- plot_go_enrichment(final_results, font_size = 10, title = title)
# Print the plot to the R plotting environment
print(go_plot)
return(list(results = final_results, plot = go_plot))
}
main_workflow(df, n = 50, title = 'Test')
# Required libraries (ensure these are installed)
library(clusterProfiler)
library(org.Hs.eg.db)
library(dplyr)
library(ggplot2)
library(ggtext)
library(scales)
# Function to perform GO enrichment analysis using gseGO
perform_go_enrichment <- function(df, ont) {
# Convert gene symbols to Entrez IDs
entrez_ids <- mapIds(org.Hs.eg.db, keys = df$X, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
# Remove NA values from entrez_ids
valid_idx <- !is.na(entrez_ids)
entrez_ids <- entrez_ids[valid_idx]
# Skip if no valid IDs
if(length(entrez_ids) == 0) {
warning("No valid Entrez IDs found. Cannot perform enrichment analysis.")
return(NULL)
}
# Filter df to only include rows with valid Entrez IDs
valid_df <- df[valid_idx, ]
# Remove duplicates
dup_idx <- duplicated(entrez_ids)
entrez_ids <- entrez_ids[!dup_idx]
valid_df <- valid_df[!dup_idx, ]
# Create a named vector of logFC values
geneList <- valid_df$log2FoldChange
names(geneList) <- entrez_ids
# Final check for NA values
if(any(is.na(names(geneList)))) {
warning("NA values found in geneList names. Removing them.")
geneList <- geneList[!is.na(names(geneList))]
}
# Skip if no valid genes left
if(length(geneList) == 0) {
warning("No valid genes left for enrichment analysis.")
return(NULL)
}
# Sort geneList in decreasing order
geneList <- sort(geneList, decreasing = TRUE)
# Perform GSEA
set.seed(1)
tryCatch({
enrich <- gseGO(geneList = geneList,
OrgDb = org.Hs.eg.db,
ont = ont,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
verbose = FALSE)
return(enrich)
}, error = function(e) {
warning(paste("Error in gseGO:", e$message))
return(NULL)
})
}
# Function to extract top GO terms from the results
extract_top_go_terms <- function(enrich, n) {
# Check if enrich is NULL or empty
if(is.null(enrich) || nrow(enrich) == 0) {
warning("No enrichment results to extract.")
return(NULL)
}
result <- as.data.frame(enrich)
result <- result %>%
arrange(pvalue) %>%
slice_head(n = n)
result$direction <- ifelse(result$NES > 0, "Up", "Down")
return(result)
}
# Function to create a combined dataframe with GO terms, gene ratios, and gene lists
create_combined_df <- function(df, ont_list, n) {
result_df <- data.frame()
for (ont in ont_list) {
enrich <- perform_go_enrichment(df, ont)
if(!is.null(enrich) && nrow(enrich) > 0) {
top_terms <- extract_top_go_terms(enrich, n)
if(!is.null(top_terms) && nrow(top_terms) > 0) {
top_terms$ont <- ont
top_terms$gene_ratio <- top_terms$setSize / nrow(df)
top_terms$gene_count <- top_terms$setSize
result_df <- rbind(result_df, top_terms)
}
}
}
# Check if we have any results
if(nrow(result_df) == 0) {
stop("No enrichment results found for any ontology.")
}
return(result_df)
}
# Clustering function
cluster_go_terms <- function(go_data, h = 0.9) {
print("Starting clustering...")
print(paste("Number of GO terms:", nrow(go_data)))
# Extract GO terms and their associated gene lists
go_terms <- go_data$ID
genes_list <- strsplit(go_data$core_enrichment, "/")
print(paste("Number of gene lists:", length(genes_list)))
# Filter out GO terms with no genes
valid_indices <- sapply(genes_list, function(gene_data) !is.null(gene_data) && length(gene_data) > 0)
valid_go_terms <- go_terms[valid_indices]
valid_genes_list <- genes_list[valid_indices]
print(paste("Number of valid GO terms:", length(valid_go_terms)))
# If no valid GO terms, return an empty dataframe
if (length(valid_go_terms) == 0) {
print("No valid GO terms found. Returning empty dataframe.")
return(data.frame(ID = character(0), cluster = integer(0)))
}
# Define Jaccard similarity function
jaccard_similarity <- function(set1, set2) {
intersection <- length(intersect(set1, set2))
union <- length(union(set1, set2))
return(intersection / union)
}
# Initialize similarity matrix
n <- length(valid_go_terms)
similarity_matrix <- matrix(0, nrow = n, ncol = n, dimnames = list(valid_go_terms, valid_go_terms))
# Calculate pairwise Jaccard similarities
for (i in 1:n) {
for (j in i:n) {
sim <- jaccard_similarity(valid_genes_list[[i]], valid_genes_list[[j]])
similarity_matrix[i, j] <- sim
similarity_matrix[j, i] <- sim  # Symmetric matrix
}
}
# Convert similarity matrix to distance matrix (1 - similarity)
distance_matrix <- 1 - similarity_matrix
# Perform hierarchical clustering
hc <- hclust(as.dist(distance_matrix), method = "average")
# Cut the dendrogram into clusters
clusters <- cutree(hc, h = h)
# Return dataframe with valid GO terms and their clusters
result_df <- data.frame(ID = valid_go_terms, cluster = clusters)
print(paste("Number of clusters:", length(unique(clusters))))
print("Clustering completed.")
return(result_df)
}
# Plotting function
plot_go_enrichment <- function(df, font_size = 8, legend_size = 12, cluster_dot_size = 8, title = NULL) {
# Check for required columns
required_cols <- c("ID", "Description", "pvalue", "ont", "direction", "gene_ratio", "gene_count", "cluster")
missing_cols <- setdiff(required_cols, colnames(df))
if (length(missing_cols) > 0) {
stop(paste("Missing required columns:", paste(missing_cols, collapse = ", ")))
}
# Ensure all required columns are present and non-null
df <- df %>%
filter(!is.na(ID) & !is.na(Description) & !is.na(pvalue) &
!is.na(ont) & !is.na(direction) & !is.na(gene_ratio) &
!is.na(gene_count) & !is.na(cluster))
# Generate a color palette based on the number of clusters
n_clusters <- length(unique(df$cluster))
color_palette <- scales::hue_pal()(n_clusters)
# Create labels with p-value formatting and asterisks
df$label <- sapply(1:nrow(df), function(i) {
pval <- df$pvalue[i]
pval_formatted <- formatC(pval, format = "e", digits = 2)
stars <- ""
if (pval < 0.001) {
stars <- '<span style="font-family: monospace;">***</span>'
} else if (pval < 0.01) {
stars <- '<span style="font-family: monospace;">** </span>'
} else if (pval < 0.05) {
stars <- '<span style="font-family: monospace;"> * </span>'
}
paste0(df$Description[i], " - ", df$ID[i], " - p-val: ", pval_formatted, " ", stars)
})
# Rank by cluster, then by descending NES value
df <- df %>%
arrange(cluster, abs(NES)) %>%
mutate(rank = row_number())
# Create the plot
p <- ggplot(df, aes(x = abs(NES), y = reorder(label, rank))) +
geom_point(aes(color = factor(cluster), size = gene_count), shape = 21, stroke = 0.9, fill = NA) +  # Outline
geom_point(aes(color = factor(cluster), size = gene_count), alpha = 0.7) +  # Filled dot
geom_text(aes(label = cluster), size = 2.5, color = "white", fontface = "bold", show.legend = FALSE) +  # Cluster number
facet_grid(ont ~ direction, scales = "free_y", space = "free_y") +
scale_color_manual(values = color_palette) +
scale_size_continuous(range = c(2, 10)) +
scale_x_continuous(limits = c(0, NA)) +  # Set x-axis to start from 0
theme_bw() +
theme(
axis.text.y = ggtext::element_markdown(size = font_size),
legend.title = element_text(size = legend_size),
legend.text = element_text(size = legend_size),
legend.key.size = unit(cluster_dot_size, "mm")
) +
guides(
color = guide_legend(override.aes = list(size = cluster_dot_size))
) +
labs(x = "Absolute NES", y = "GO Term", color = "Cluster", size = "Gene Count",
title = title)  # Add the user-provided title
return(p)
}
# Main workflow function (prints plots to the plotting environment)
main_workflow <- function(df, ont_list = c("BP", "CC", "MF"), n = 20, h = 0.95, title = NULL) {
# Verify input data structure
if(!("X" %in% colnames(df))) {
stop("Input dataframe must contain a column named 'X' with gene symbols")
}
if(!("log2FoldChange" %in% colnames(df))) {
stop("Input dataframe must contain a column named 'log2FoldChange'")
}
# Print information about the input
cat("Input dataframe summary:\n")
cat("Number of genes:", nrow(df), "\n")
cat("Number of unique genes:", length(unique(df$X)), "\n")
cat("Number of genes with NA symbols:", sum(is.na(df$X)), "\n")
cat("Number of genes with NA log2FoldChange:", sum(is.na(df$log2FoldChange)), "\n")
# Remove NA values from input
df <- df[!is.na(df$X) & !is.na(df$log2FoldChange), ]
cat("After removing NAs, number of genes:", nrow(df), "\n")
# Perform enrichment analysis with robust error handling
tryCatch({
enrichment_results <- create_combined_df(df, ont_list, n)
# Perform clustering
clustered_results <- cluster_go_terms(enrichment_results, h)
# Merge enrichment and clustering results
final_results <- merge(enrichment_results, clustered_results, by = "ID", all.x = TRUE)
# Create the plot
go_plot <- plot_go_enrichment(final_results, font_size = 10, title = title)
# Print the plot to the R plotting environment
print(go_plot)
return(list(results = final_results, plot = go_plot))
}, error = function(e) {
cat("Error in main workflow:", e$message, "\n")
return(NULL)
})
}
main_workflow(df, n = 50, title = 'Test')
x = read.csv('/home/glennrossdolan/Documents/gut-signaling-jakstat-ibd/05_results_repository/DEG_Results/enteroendocrine_CD_vs_Control.csv')
main_workflow(x, n = 50, title = 'Test')
csv.read('/home/glennrossdolan/Documents/gut-signaling-jakstat-ibd/06_data_repository/04_li/Raw Counts/GSE266546_Raw_counts_AC_Surgical.txt')
x = csv.read('/home/glennrossdolan/Documents/gut-signaling-jakstat-ibd/06_data_repository/04_li/Raw Counts/GSE266546_Raw_counts_AC_Surgical.txt')
x = csv.read('/home/glennrossdolan/Documents/gut-signaling-jakstat-ibd/06_data_repository/04_li/Raw Counts/GSE266546_Raw_counts_AC_Surgical.txt')
x = read.csv('/home/glennrossdolan/Documents/gut-signaling-jakstat-ibd/06_data_repository/04_li/Raw Counts/GSE266546_Raw_counts_AC_Surgical.txt')
View(x)
x = read.csv('/home/glennrossdolan/Documents/gut-signaling-jakstat-ibd/06_data_repository/04_li/Raw Counts/GSE266546_Raw_counts_AC_Surgical.txt', sep = ' ')
x = read.csv('/home/glennrossdolan/Documents/gut-signaling-jakstat-ibd/06_data_repository/04_li/Raw Counts/GSE266546_Raw_counts_AC_Surgical.txt', sep = '\t')
View(x)
View(x)
sobj <- readRDS('/home/glennrossdolan/Documents/gut-signaling-jakstat-ibd/06_data_repository/02_Pediatric_CD/raw_pediatric_chron_ileum.rds')
gc()
gc()
gc()
# # regular packages
install.packages('pak')
# Install from terminal
# sudo apt-get update
# sudo apt-get install libcurl4-openssl-dev libfontconfig1-dev libfreetype6-dev libfribidi-dev libharfbuzz-dev libtiff-dev libxml2-dev pandoc
# # regular packages
# install.packages('pak')
# library(pak)
# pak('ggplot2')
# pak('stringr')
# pak('tools')
# pak('ggridges')
# pak('viridis')
# pak('tidyverse')
# pak('ggtext')
# pak('dplyr')
# pak('pheatmap')
# pak('aPEAR')
#
# # Install bioconductor
# if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install(version = "3.19")
#
# # bioconductor packages
# BiocManager::install("clusterProfiler")
# BiocManager::install("org.Mm.eg.db")
# BiocManager::install("DOSE")
# BiocManager::install("pathview")
# BiocManager::install("enrichplot")
# BiocManager::install("gage")
# BiocManager::install("gageData")
# BiocManager::install("KEGGREST")
# BiocManager::install("AnnotationDbi", force = T)
# BiocManager::install('EnhancedVolcano')
# BiocManager::install('DESeq2')
# BiocManager::install('biomaRt')
# BiocManager::install('org.Mm.eg.db')
# BiocManager::install('gage')
# BiocManager::install('gageData')
# BiocManager::install('biomaRt')
# BiocManager::install('stringdist')
# Load packages
library(clusterProfiler)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(DOSE)
library(pathview)
library(dplyr)
library(enrichplot)
library(ggplot2)
library(stringr)
library(gage)
library(gageData)
library(tools)
library(ggridges)
library(viridis)
library(tidyverse)
library(KEGGREST)
library(ggtext)
library(pheatmap)
# library(aPEAR)
library(EnhancedVolcano)
library(DESeq2)
library(biomaRt)
library(stringdist)
# library(dendextend)
library(scales)
# Load required libraries
library(Seurat)
library(DESeq2)
library(dplyr)
library(tidyr)
library(EnhancedVolcano)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
# Load Seurat object with single-cell RNA-seq data
sobj <- readRDS('/home/glennrossdolan/Documents/gut-signaling-jakstat-ibd/06_data_repository/04_li/GSE266546.rds')
